#version 460 core
#extension GL_KHR_vulkan_glsl : enable
layout (constant_id = 0) const uint Octaves = 4;
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (binding = 0) readonly buffer PermutationsBuffer
{
	uint Permutations[];
};

layout (set = 1, binding = 0, r32f) uniform writeonly image2D Result;

layout (push_constant) uniform PushConstants
{
	vec2 Offset;
	float Persistance;
	float Lacunarity;
};

vec2 fade(in vec2 x)
{
	return (x * x * x) * (x * (x * 6.0f - 15.0f) + 10.0f);
}

float gradient(in uint i, in float x, in float y)
{
	const uint h = Permutations[i];
	return (bool(h & 1) ? -x : x) + (bool(h & 2) ? -y : y);
}

float octave(float frequency)
{
	vec2 p = (Offset + gl_GlobalInvocationID.xy / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy)) * frequency;

	const vec2 f = floor(p);
	const uvec2 uf = uvec2(f) & 0xFF;

	const uint a = Permutations[Permutations[uf.x] + uf.y];
	const uint b = Permutations[Permutations[uf.x + 1] + uf.y];
	const uint ab = Permutations[Permutations[uf.x] + uf.y + 1];
	const uint ba = Permutations[Permutations[uf.x + 1] + uf.y + 1];

	const vec2 uv = fade(p -= f);
	const float u = mix(gradient(a, p.x, p.y), gradient(b, p.x - 1.0f, p.y), uv.x);
	const float v = mix(gradient(ab, p.x, p.y - 1.0f), gradient(ba, p.x - 1.0f, p.y - 1.0f), uv.x);
	return (mix(u, v, uv.y) + 1.0f) * 0.5f;
}

void main()
{
	float amplitude = 1.0f;
	float frequency = 1.0f;
	float divider = 0.0f;
	float result = 0.0f;

	for (uint i = 0; i < Octaves; i++, amplitude *= Persistance, frequency *= Lacunarity)
	{
		result += octave(frequency) * amplitude;
		divider += amplitude;
	}

	imageStore(Result, ivec2(gl_GlobalInvocationID.xy), (result / divider).xxxx);
}