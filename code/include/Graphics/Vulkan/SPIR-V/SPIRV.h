#pragma once
#include "Core/Math/Constants.h"
#include "Core/EnumUtils.h"

// Copyright (c) 2014-2018 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and/or associated documentation files (the "Materials"),
// to deal in the Materials without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Materials, and to permit persons to whom the
// Materials are furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Materials.
// 
// MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS
// STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND
// HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/ 
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS
// IN THE MATERIALS.

// This header is automatically generated by the same tool that creates
// the Binary Section of the SPIR-V specification.

// Enumeration tokens for SPIR-V, in various styles:
//   C, C++, C++11, JSON, Lua, Python, C#
// 
// - C will have tokens with a "Spv" prefix, e.g.: SpvSourceLanguageGLSL
// - C++ will have tokens in the "spv" name space, e.g.: spv::SourceLanguageGLSL
// - C++11 will use enum classes in the spv namespace, e.g.: spv::SourceLanguage::GLSL
// - Lua will use tables, e.g.: spv.SourceLanguage.GLSL
// - Python will use dictionaries, e.g.: spv['SourceLanguage']['GLSL']
// - C# will use enum classes in the Specification class located in the "Spv" namespace, e.g.: Spv.Specification.SourceLanguage.GLSL
// 
// Some tokens act like mask values, which can be OR'd together,
// while others are mutually exclusive.  The mask-like ones have
// "Mask" in their name, and a parallel enum that has the shift
// amount (1 << x) for each corresponding enumerant.

#define SPV_VERSION 0x10300
#define SPV_REVISION 1

namespace spv
{
	using Word = Pu::uint32;
	using Id = Word;

	constexpr unsigned int MagicNumber = 0x07230203;
	constexpr unsigned int Version = 0x00010300;
	constexpr unsigned int Revision = 1;
	constexpr unsigned int OpCodeMask = 0xffff;
	constexpr unsigned int WordCountShift = 16;

	enum class SourceLanguage : unsigned 
	{
		Unknown = 0,
		ESSL = 1,
		GLSL = 2,
		OpenCL_C = 3,
		OpenCL_CPP = 4,
		HLSL = 5,
		Max = 0x7fffffff,
	};

	enum class ExecutionModel : unsigned 
	{
		Vertex = 0,
		TessellationControl = 1,
		TessellationEvaluation = 2,
		Geometry = 3,
		Fragment = 4,
		GLCompute = 5,
		Kernel = 6,
		TaskNV = 5267,
		MeshNV = 5268,
		RayGenerationNV = 5313,
		IntersectionNV = 5314,
		AnyHitNV = 5315,
		ClosestHitNV = 5316,
		MissNV = 5317,
		CallableNV = 5318,
		Max = 0x7fffffff,
	};

	enum class AddressingModel : unsigned 
	{
		Logical = 0,
		Physical32 = 1,
		Physical64 = 2,
		Max = 0x7fffffff,
	};

	enum class MemoryModel : unsigned 
	{
		Simple = 0,
		GLSL450 = 1,
		OpenCL = 2,
		VulkanKHR = 3,
		Max = 0x7fffffff,
	};

	enum class ExecutionMode : unsigned
	{
		Invocations = 0,
		SpacingEqual = 1,
		SpacingFractionalEven = 2,
		SpacingFractionalOdd = 3,
		VertexOrderCw = 4,
		VertexOrderCcw = 5,
		PixelCenterInteger = 6,
		OriginUpperLeft = 7,
		OriginLowerLeft = 8,
		EarlyFragmentTests = 9,
		PointMode = 10,
		Xfb = 11,
		DepthReplacing = 12,
		DepthGreater = 14,
		DepthLess = 15,
		DepthUnchanged = 16,
		LocalSize = 17,
		LocalSizeHint = 18,
		InputPoints = 19,
		InputLines = 20,
		InputLinesAdjacency = 21,
		Triangles = 22,
		InputTrianglesAdjacency = 23,
		Quads = 24,
		Isolines = 25,
		OutputVertices = 26,
		OutputPoints = 27,
		OutputLineStrip = 28,
		OutputTriangleStrip = 29,
		VecTypeHint = 30,
		ContractionOff = 31,
		Initializer = 33,
		Finalizer = 34,
		SubgroupSize = 35,
		SubgroupsPerWorkgroup = 36,
		SubgroupsPerWorkgroupId = 37,
		LocalSizeId = 38,
		LocalSizeHintId = 39,
		PostDepthCoverage = 4446,
		StencilRefReplacingEXT = 5027,
		OutputLinesNV = 5269,
		OutputPrimitivesNV = 5270,
		DerivativeGroupQuadsNV = 5289,
		DerivativeGroupLinearNV = 5290,
		OutputTrianglesNV = 5298,
		Max = 0x7fffffff,
	};

	enum class StorageClass : unsigned 
	{
		UniformConstant = 0,
		Input = 1,
		Uniform = 2,
		Output = 3,
		Workgroup = 4,
		CrossWorkgroup = 5,
		Private = 6,
		Function = 7,
		Generic = 8,
		PushConstant = 9,
		AtomicCounter = 10,
		Image = 11,
		StorageBuffer = 12,
		CallableDataNV = 5328,
		IncomingCallableDataNV = 5329,
		RayPayloadNV = 5338,
		HitAttributeNV = 5339,
		IncomingRayPayloadNV = 5342,
		ShaderRecordBufferNV = 5343,
		Max = 0x7fffffff,
	};

	enum class Dim : unsigned 
	{
		Dim1D = 0,
		Dim2D = 1,
		Dim3D = 2,
		Cube = 3,
		Rect = 4,
		Buffer = 5,
		SubpassData = 6,
		Max = 0x7fffffff,
	};

	enum class SamplerAddressingMode : unsigned
	{
		None = 0,
		ClampToEdge = 1,
		Clamp = 2,
		Repeat = 3,
		RepeatMirrored = 4,
		Max = 0x7fffffff,
	};

	enum class SamplerFilterMode : unsigned 
	{
		Nearest = 0,
		Linear = 1,
		Max = 0x7fffffff,
	};

	enum class ImageFormat : unsigned 
	{
		Unknown = 0,
		Rgba32f = 1,
		Rgba16f = 2,
		R32f = 3,
		Rgba8 = 4,
		Rgba8Snorm = 5,
		Rg32f = 6,
		Rg16f = 7,
		R11fG11fB10f = 8,
		R16f = 9,
		Rgba16 = 10,
		Rgb10A2 = 11,
		Rg16 = 12,
		Rg8 = 13,
		R16 = 14,
		R8 = 15,
		Rgba16Snorm = 16,
		Rg16Snorm = 17,
		Rg8Snorm = 18,
		R16Snorm = 19,
		R8Snorm = 20,
		Rgba32i = 21,
		Rgba16i = 22,
		Rgba8i = 23,
		R32i = 24,
		Rg32i = 25,
		Rg16i = 26,
		Rg8i = 27,
		R16i = 28,
		R8i = 29,
		Rgba32ui = 30,
		Rgba16ui = 31,
		Rgba8ui = 32,
		R32ui = 33,
		Rgb10a2ui = 34,
		Rg32ui = 35,
		Rg16ui = 36,
		Rg8ui = 37,
		R16ui = 38,
		R8ui = 39,
		Max = 0x7fffffff,
	};

	enum class ImageChannelOrder : unsigned 
	{
		R = 0,
		A = 1,
		RG = 2,
		RA = 3,
		RGB = 4,
		RGBA = 5,
		BGRA = 6,
		ARGB = 7,
		Intensity = 8,
		Luminance = 9,
		Rx = 10,
		RGx = 11,
		RGBx = 12,
		Depth = 13,
		DepthStencil = 14,
		sRGB = 15,
		sRGBx = 16,
		sRGBA = 17,
		sBGRA = 18,
		ABGR = 19,
		Max = 0x7fffffff,
	};

	enum class ImageChannelDataType : unsigned
	{
		SnormInt8 = 0,
		SnormInt16 = 1,
		UnormInt8 = 2,
		UnormInt16 = 3,
		UnormShort565 = 4,
		UnormShort555 = 5,
		UnormInt101010 = 6,
		SignedInt8 = 7,
		SignedInt16 = 8,
		SignedInt32 = 9,
		UnsignedInt8 = 10,
		UnsignedInt16 = 11,
		UnsignedInt32 = 12,
		HalfFloat = 13,
		Float = 14,
		UnormInt24 = 15,
		UnormInt101010_2 = 16,
		Max = 0x7fffffff,
	};

	enum class ImageOperandsShift : unsigned 
	{
		Bias = 0,
		Lod = 1,
		Grad = 2,
		ConstOffset = 3,
		Offset = 4,
		ConstOffsets = 5,
		Sample = 6,
		MinLod = 7,
		MakeTexelAvailableKHR = 8,
		MakeTexelVisibleKHR = 9,
		NonPrivateTexelKHR = 10,
		VolatileTexelKHR = 11,
		Max = 0x7fffffff,
	};

	enum class ImageOperandsMask : unsigned 
	{
		MaskNone = 0,
		Bias = 0x00000001,
		Lod = 0x00000002,
		Grad = 0x00000004,
		ConstOffset = 0x00000008,
		Offset = 0x00000010,
		ConstOffsets = 0x00000020,
		Sample = 0x00000040,
		MinLod = 0x00000080,
		MakeTexelAvailableKHR = 0x00000100,
		MakeTexelVisibleKHR = 0x00000200,
		NonPrivateTexelKHR = 0x00000400,
		VolatileTexelKHR = 0x00000800,
	};

	enum class FPFastMathModeShift : unsigned
	{
		NotNaN = 0,
		NotInf = 1,
		NSZ = 2,
		AllowRecip = 3,
		Fast = 4,
		Max = 0x7fffffff,
	};

	enum class FPFastMathModeMask : unsigned 
	{
		MaskNone = 0,
		NotNaN = 0x00000001,
		NotInf = 0x00000002,
		NSZ = 0x00000004,
		AllowRecip = 0x00000008,
		Fast = 0x00000010,
	};

	enum class FPRoundingMode : unsigned 
	{
		RTE = 0,
		RTZ = 1,
		RTP = 2,
		RTN = 3,
		Max = 0x7fffffff,
	};

	enum class LinkageType : unsigned 
	{
		Export = 0,
		Import = 1,
		Max = 0x7fffffff,
	};

	enum class AccessQualifier : unsigned 
	{
		ReadOnly = 0,
		WriteOnly = 1,
		ReadWrite = 2,
		Max = 0x7fffffff,
	};

	enum class FunctionParameterAttribute : unsigned 
	{
		Zext = 0,
		Sext = 1,
		ByVal = 2,
		Sret = 3,
		NoAlias = 4,
		NoCapture = 5,
		NoWrite = 6,
		NoReadWrite = 7,
		Max = 0x7fffffff,
	};

	enum class Decoration : unsigned
	{
		RelaxedPrecision = 0,
		SpecId = 1,
		Block = 2,
		BufferBlock = 3,
		RowMajor = 4,
		ColMajor = 5,
		ArrayStride = 6,
		MatrixStride = 7,
		GLSLShared = 8,
		GLSLPacked = 9,
		CPacked = 10,
		BuiltIn = 11,
		NoPerspective = 13,
		Flat = 14,
		Patch = 15,
		Centroid = 16,
		Sample = 17,
		Invariant = 18,
		Restrict = 19,
		Aliased = 20,
		Volatile = 21,
		Constant = 22,
		Coherent = 23,
		NonWritable = 24,
		NonReadable = 25,
		Uniform = 26,
		SaturatedConversion = 28,
		Stream = 29,
		Location = 30,
		Component = 31,
		Index = 32,
		Binding = 33,
		DescriptorSet = 34,
		Offset = 35,
		XfbBuffer = 36,
		XfbStride = 37,
		FuncParamAttr = 38,
		FPRoundingMode = 39,
		FPFastMathMode = 40,
		LinkageAttributes = 41,
		NoContraction = 42,
		InputAttachmentIndex = 43,
		Alignment = 44,
		MaxByteOffset = 45,
		AlignmentId = 46,
		MaxByteOffsetId = 47,
		ExplicitInterpAMD = 4999,
		OverrideCoverageNV = 5248,
		PassthroughNV = 5250,
		ViewportRelativeNV = 5252,
		SecondaryViewportRelativeNV = 5256,
		PerPrimitiveNV = 5271,
		PerViewNV = 5272,
		PerTaskNV = 5273,
		PerVertexNV = 5285,
		NonUniformEXT = 5300,
		HlslCounterBufferGOOGLE = 5634,
		HlslSemanticGOOGLE = 5635,
		Max = 0x7fffffff,
	};

	enum class BuiltIn : unsigned
	{
		Position = 0,
		PointSize = 1,
		ClipDistance = 3,
		CullDistance = 4,
		VertexId = 5,
		InstanceId = 6,
		PrimitiveId = 7,
		InvocationId = 8,
		Layer = 9,
		ViewportIndex = 10,
		TessLevelOuter = 11,
		TessLevelInner = 12,
		TessCoord = 13,
		PatchVertices = 14,
		FragCoord = 15,
		PointCoord = 16,
		FrontFacing = 17,
		SampleId = 18,
		SamplePosition = 19,
		SampleMask = 20,
		FragDepth = 22,
		HelperInvocation = 23,
		NumWorkgroups = 24,
		WorkgroupSize = 25,
		WorkgroupId = 26,
		LocalInvocationId = 27,
		GlobalInvocationId = 28,
		LocalInvocationIndex = 29,
		WorkDim = 30,
		GlobalSize = 31,
		EnqueuedWorkgroupSize = 32,
		GlobalOffset = 33,
		GlobalLinearId = 34,
		SubgroupSize = 36,
		SubgroupMaxSize = 37,
		NumSubgroups = 38,
		NumEnqueuedSubgroups = 39,
		SubgroupId = 40,
		SubgroupLocalInvocationId = 41,
		VertexIndex = 42,
		InstanceIndex = 43,
		SubgroupEqMask = 4416,
		SubgroupEqMaskKHR = 4416,
		SubgroupGeMask = 4417,
		SubgroupGeMaskKHR = 4417,
		SubgroupGtMask = 4418,
		SubgroupGtMaskKHR = 4418,
		SubgroupLeMask = 4419,
		SubgroupLeMaskKHR = 4419,
		SubgroupLtMask = 4420,
		SubgroupLtMaskKHR = 4420,
		BaseVertex = 4424,
		BaseInstance = 4425,
		DrawIndex = 4426,
		DeviceIndex = 4438,
		ViewIndex = 4440,
		BaryCoordNoPerspAMD = 4992,
		BaryCoordNoPerspCentroidAMD = 4993,
		BaryCoordNoPerspSampleAMD = 4994,
		BaryCoordSmoothAMD = 4995,
		BaryCoordSmoothCentroidAMD = 4996,
		BaryCoordSmoothSampleAMD = 4997,
		BaryCoordPullModelAMD = 4998,
		FragStencilRefEXT = 5014,
		ViewportMaskNV = 5253,
		SecondaryPositionNV = 5257,
		SecondaryViewportMaskNV = 5258,
		PositionPerViewNV = 5261,
		ViewportMaskPerViewNV = 5262,
		FullyCoveredEXT = 5264,
		TaskCountNV = 5274,
		PrimitiveCountNV = 5275,
		PrimitiveIndicesNV = 5276,
		ClipDistancePerViewNV = 5277,
		CullDistancePerViewNV = 5278,
		LayerPerViewNV = 5279,
		MeshViewCountNV = 5280,
		MeshViewIndicesNV = 5281,
		BaryCoordNV = 5286,
		BaryCoordNoPerspNV = 5287,
		FragmentSizeNV = 5292,
		InvocationsPerPixelNV = 5293,
		LaunchIdNV = 5319,
		LaunchSizeNV = 5320,
		WorldRayOriginNV = 5321,
		WorldRayDirectionNV = 5322,
		ObjectRayOriginNV = 5323,
		ObjectRayDirectionNV = 5324,
		RayTminNV = 5325,
		RayTmaxNV = 5326,
		InstanceCustomIndexNV = 5327,
		ObjectToWorldNV = 5330,
		WorldToObjectNV = 5331,
		HitTNV = 5332,
		HitKindNV = 5333,
		IncomingRayFlagsNV = 5351,
		Max = 0x7fffffff,
	};

	enum class SelectionControlShift : unsigned
	{
		Flatten = 0,
		DontFlatten = 1,
		Max = 0x7fffffff,
	};

	enum class SelectionControlMask : unsigned 
	{
		MaskNone = 0,
		Flatten = 0x00000001,
		DontFlatten = 0x00000002,
	};

	enum class LoopControlShift : unsigned
	{
		Unroll = 0,
		DontUnroll = 1,
		DependencyInfinite = 2,
		DependencyLength = 3,
		Max = 0x7fffffff,
	};

	enum class LoopControlMask : unsigned 
	{
		MaskNone = 0,
		Unroll = 0x00000001,
		DontUnroll = 0x00000002,
		DependencyInfinite = 0x00000004,
		DependencyLength = 0x00000008,
	};

	enum class FunctionControlShift : unsigned 
	{
		Inline = 0,
		DontInline = 1,
		Pure = 2,
		Const = 3,
		Max = 0x7fffffff,
	};

	enum class FunctionControlMask : unsigned
	{
		MaskNone = 0,
		Inline = 0x00000001,
		DontInline = 0x00000002,
		Pure = 0x00000004,
		Const = 0x00000008,
	};

	enum class MemorySemanticsShift : unsigned 
	{
		Acquire = 1,
		Release = 2,
		AcquireRelease = 3,
		SequentiallyConsistent = 4,
		UniformMemory = 6,
		SubgroupMemory = 7,
		WorkgroupMemory = 8,
		CrossWorkgroupMemory = 9,
		AtomicCounterMemory = 10,
		ImageMemory = 11,
		OutputMemoryKHR = 12,
		MakeAvailableKHR = 13,
		MakeVisibleKHR = 14,
		Max = 0x7fffffff,
	};

	enum class MemorySemanticsMask : unsigned 
	{
		MaskNone = 0,
		Acquire = 0x00000002,
		Release = 0x00000004,
		AcquireRelease = 0x00000008,
		SequentiallyConsistent = 0x00000010,
		UniformMemory = 0x00000040,
		SubgroupMemory = 0x00000080,
		WorkgroupMemory = 0x00000100,
		CrossWorkgroupMemory = 0x00000200,
		AtomicCounterMemory = 0x00000400,
		ImageMemory = 0x00000800,
		OutputMemoryKHR = 0x00001000,
		MakeAvailableKHR = 0x00002000,
		MakeVisibleKHR = 0x00004000,
	};

	enum class MemoryAccessShift : unsigned
	{
		Volatile = 0,
		Aligned = 1,
		Nontemporal = 2,
		MakePointerAvailableKHR = 3,
		MakePointerVisibleKHR = 4,
		NonPrivatePointerKHR = 5,
		Max = 0x7fffffff,
	};

	enum class MemoryAccessMask : unsigned 
	{
		MaskNone = 0,
		Volatile = 0x00000001,
		Aligned = 0x00000002,
		Nontemporal = 0x00000004,
		MakePointerAvailableKHR = 0x00000008,
		MakePointerVisibleKHR = 0x00000010,
		NonPrivatePointerKHR = 0x00000020,
	};

	enum class Scope : unsigned
	{
		CrossDevice = 0,
		Device = 1,
		Workgroup = 2,
		Subgroup = 3,
		Invocation = 4,
		QueueFamilyKHR = 5,
		Max = 0x7fffffff,
	};

	enum class GroupOperation : unsigned
	{
		Reduce = 0,
		InclusiveScan = 1,
		ExclusiveScan = 2,
		ClusteredReduce = 3,
		PartitionedReduceNV = 6,
		PartitionedInclusiveScanNV = 7,
		PartitionedExclusiveScanNV = 8,
		Max = 0x7fffffff,
	};

	enum class KernelEnqueueFlags : unsigned
	{
		NoWait = 0,
		WaitKernel = 1,
		WaitWorkGroup = 2,
		Max = 0x7fffffff,
	};

	enum class KernelProfilingInfoShift : unsigned {
		CmdExecTime = 0,

		Max = 0x7fffffff,
	};

	enum class KernelProfilingInfoMask : unsigned 
	{
		MaskNone = 0,
		CmdExecTime = 0x00000001,
	};

	enum class Capability : unsigned 
	{
		Matrix = 0,
		Shader = 1,
		Geometry = 2,
		Tessellation = 3,
		Addresses = 4,
		Linkage = 5,
		Kernel = 6,
		Vector16 = 7,
		Float16Buffer = 8,
		Float16 = 9,
		Float64 = 10,
		Int64 = 11,
		Int64Atomics = 12,
		ImageBasic = 13,
		ImageReadWrite = 14,
		ImageMipmap = 15,
		Pipes = 17,
		Groups = 18,
		DeviceEnqueue = 19,
		LiteralSampler = 20,
		AtomicStorage = 21,
		Int16 = 22,
		TessellationPointSize = 23,
		GeometryPointSize = 24,
		ImageGatherExtended = 25,
		StorageImageMultisample = 27,
		UniformBufferArrayDynamicIndexing = 28,
		SampledImageArrayDynamicIndexing = 29,
		StorageBufferArrayDynamicIndexing = 30,
		StorageImageArrayDynamicIndexing = 31,
		ClipDistance = 32,
		CullDistance = 33,
		ImageCubeArray = 34,
		SampleRateShading = 35,
		ImageRect = 36,
		SampledRect = 37,
		GenericPointer = 38,
		Int8 = 39,
		InputAttachment = 40,
		SparseResidency = 41,
		MinLod = 42,
		Sampled1D = 43,
		Image1D = 44,
		SampledCubeArray = 45,
		SampledBuffer = 46,
		ImageBuffer = 47,
		ImageMSArray = 48,
		StorageImageExtendedFormats = 49,
		ImageQuery = 50,
		DerivativeControl = 51,
		InterpolationFunction = 52,
		TransformFeedback = 53,
		GeometryStreams = 54,
		StorageImageReadWithoutFormat = 55,
		StorageImageWriteWithoutFormat = 56,
		MultiViewport = 57,
		SubgroupDispatch = 58,
		NamedBarrier = 59,
		PipeStorage = 60,
		GroupNonUniform = 61,
		GroupNonUniformVote = 62,
		GroupNonUniformArithmetic = 63,
		GroupNonUniformBallot = 64,
		GroupNonUniformShuffle = 65,
		GroupNonUniformShuffleRelative = 66,
		GroupNonUniformClustered = 67,
		GroupNonUniformQuad = 68,
		SubgroupBallotKHR = 4423,
		DrawParameters = 4427,
		SubgroupVoteKHR = 4431,
		StorageBuffer16BitAccess = 4433,
		StorageUniformBufferBlock16 = 4433,
		StorageUniform16 = 4434,
		UniformAndStorageBuffer16BitAccess = 4434,
		StoragePushConstant16 = 4435,
		StorageInputOutput16 = 4436,
		DeviceGroup = 4437,
		MultiView = 4439,
		VariablePointersStorageBuffer = 4441,
		VariablePointers = 4442,
		AtomicStorageOps = 4445,
		SampleMaskPostDepthCoverage = 4447,
		StorageBuffer8BitAccess = 4448,
		UniformAndStorageBuffer8BitAccess = 4449,
		StoragePushConstant8 = 4450,
		Float16ImageAMD = 5008,
		ImageGatherBiasLodAMD = 5009,
		FragmentMaskAMD = 5010,
		StencilExportEXT = 5013,
		ImageReadWriteLodAMD = 5015,
		SampleMaskOverrideCoverageNV = 5249,
		GeometryShaderPassthroughNV = 5251,
		ShaderViewportIndexLayerEXT = 5254,
		ShaderViewportIndexLayerNV = 5254,
		ShaderViewportMaskNV = 5255,
		ShaderStereoViewNV = 5259,
		PerViewAttributesNV = 5260,
		FragmentFullyCoveredEXT = 5265,
		MeshShadingNV = 5266,
		ImageFootprintNV = 5282,
		FragmentBarycentricNV = 5284,
		ComputeDerivativeGroupQuadsNV = 5288,
		ShadingRateNV = 5291,
		GroupNonUniformPartitionedNV = 5297,
		ShaderNonUniformEXT = 5301,
		RuntimeDescriptorArrayEXT = 5302,
		InputAttachmentArrayDynamicIndexingEXT = 5303,
		UniformTexelBufferArrayDynamicIndexingEXT = 5304,
		StorageTexelBufferArrayDynamicIndexingEXT = 5305,
		UniformBufferArrayNonUniformIndexingEXT = 5306,
		SampledImageArrayNonUniformIndexingEXT = 5307,
		StorageBufferArrayNonUniformIndexingEXT = 5308,
		StorageImageArrayNonUniformIndexingEXT = 5309,
		InputAttachmentArrayNonUniformIndexingEXT = 5310,
		UniformTexelBufferArrayNonUniformIndexingEXT = 5311,
		StorageTexelBufferArrayNonUniformIndexingEXT = 5312,
		RayTracingNV = 5340,
		VulkanMemoryModelKHR = 5345,
		VulkanMemoryModelDeviceScopeKHR = 5346,
		ComputeDerivativeGroupLinearNV = 5350,
		SubgroupShuffleINTEL = 5568,
		SubgroupBufferBlockIOINTEL = 5569,
		SubgroupImageBlockIOINTEL = 5570,
		Max = 0x7fffffff,
	};

	enum class Op : unsigned 
	{
		OpNop = 0,
		OpUndef = 1,
		OpSourceContinued = 2,
		OpSource = 3,
		OpSourceExtension = 4,
		OpName = 5,
		OpMemberName = 6,
		OpString = 7,
		OpLine = 8,
		OpExtension = 10,
		OpExtInstImport = 11,
		OpExtInst = 12,
		OpMemoryModel = 14,
		OpEntryPoint = 15,
		OpExecutionMode = 16,
		OpCapability = 17,
		OpTypeVoid = 19,
		OpTypeBool = 20,
		OpTypeInt = 21,
		OpTypeFloat = 22,
		OpTypeVector = 23,
		OpTypeMatrix = 24,
		OpTypeImage = 25,
		OpTypeSampler = 26,
		OpTypeSampledImage = 27,
		OpTypeArray = 28,
		OpTypeRuntimeArray = 29,
		OpTypeStruct = 30,
		OpTypeOpaque = 31,
		OpTypePointer = 32,
		OpTypeFunction = 33,
		OpTypeEvent = 34,
		OpTypeDeviceEvent = 35,
		OpTypeReserveId = 36,
		OpTypeQueue = 37,
		OpTypePipe = 38,
		OpTypeForwardPointer = 39,
		OpConstantTrue = 41,
		OpConstantFalse = 42,
		OpConstant = 43,
		OpConstantComposite = 44,
		OpConstantSampler = 45,
		OpConstantNull = 46,
		OpSpecConstantTrue = 48,
		OpSpecConstantFalse = 49,
		OpSpecConstant = 50,
		OpSpecConstantComposite = 51,
		OpSpecConstantOp = 52,
		OpFunction = 54,
		OpFunctionParameter = 55,
		OpFunctionEnd = 56,
		OpFunctionCall = 57,
		OpVariable = 59,
		OpImageTexelPointer = 60,
		OpLoad = 61,
		OpStore = 62,
		OpCopyMemory = 63,
		OpCopyMemorySized = 64,
		OpAccessChain = 65,
		OpInBoundsAccessChain = 66,
		OpPtrAccessChain = 67,
		OpArrayLength = 68,
		OpGenericPtrMemSemantics = 69,
		OpInBoundsPtrAccessChain = 70,
		OpDecorate = 71,
		OpMemberDecorate = 72,
		OpDecorationGroup = 73,
		OpGroupDecorate = 74,
		OpGroupMemberDecorate = 75,
		OpVectorExtractDynamic = 77,
		OpVectorInsertDynamic = 78,
		OpVectorShuffle = 79,
		OpCompositeConstruct = 80,
		OpCompositeExtract = 81,
		OpCompositeInsert = 82,
		OpCopyObject = 83,
		OpTranspose = 84,
		OpSampledImage = 86,
		OpImageSampleImplicitLod = 87,
		OpImageSampleExplicitLod = 88,
		OpImageSampleDrefImplicitLod = 89,
		OpImageSampleDrefExplicitLod = 90,
		OpImageSampleProjImplicitLod = 91,
		OpImageSampleProjExplicitLod = 92,
		OpImageSampleProjDrefImplicitLod = 93,
		OpImageSampleProjDrefExplicitLod = 94,
		OpImageFetch = 95,
		OpImageGather = 96,
		OpImageDrefGather = 97,
		OpImageRead = 98,
		OpImageWrite = 99,
		OpImage = 100,
		OpImageQueryFormat = 101,
		OpImageQueryOrder = 102,
		OpImageQuerySizeLod = 103,
		OpImageQuerySize = 104,
		OpImageQueryLod = 105,
		OpImageQueryLevels = 106,
		OpImageQuerySamples = 107,
		OpConvertFToU = 109,
		OpConvertFToS = 110,
		OpConvertSToF = 111,
		OpConvertUToF = 112,
		OpUConvert = 113,
		OpSConvert = 114,
		OpFConvert = 115,
		OpQuantizeToF16 = 116,
		OpConvertPtrToU = 117,
		OpSatConvertSToU = 118,
		OpSatConvertUToS = 119,
		OpConvertUToPtr = 120,
		OpPtrCastToGeneric = 121,
		OpGenericCastToPtr = 122,
		OpGenericCastToPtrExplicit = 123,
		OpBitcast = 124,
		OpSNegate = 126,
		OpFNegate = 127,
		OpIAdd = 128,
		OpFAdd = 129,
		OpISub = 130,
		OpFSub = 131,
		OpIMul = 132,
		OpFMul = 133,
		OpUDiv = 134,
		OpSDiv = 135,
		OpFDiv = 136,
		OpUMod = 137,
		OpSRem = 138,
		OpSMod = 139,
		OpFRem = 140,
		OpFMod = 141,
		OpVectorTimesScalar = 142,
		OpMatrixTimesScalar = 143,
		OpVectorTimesMatrix = 144,
		OpMatrixTimesVector = 145,
		OpMatrixTimesMatrix = 146,
		OpOuterProduct = 147,
		OpDot = 148,
		OpIAddCarry = 149,
		OpISubBorrow = 150,
		OpUMulExtended = 151,
		OpSMulExtended = 152,
		OpAny = 154,
		OpAll = 155,
		OpIsNan = 156,
		OpIsInf = 157,
		OpIsFinite = 158,
		OpIsNormal = 159,
		OpSignBitSet = 160,
		OpLessOrGreater = 161,
		OpOrdered = 162,
		OpUnordered = 163,
		OpLogicalEqual = 164,
		OpLogicalNotEqual = 165,
		OpLogicalOr = 166,
		OpLogicalAnd = 167,
		OpLogicalNot = 168,
		OpSelect = 169,
		OpIEqual = 170,
		OpINotEqual = 171,
		OpUGreaterThan = 172,
		OpSGreaterThan = 173,
		OpUGreaterThanEqual = 174,
		OpSGreaterThanEqual = 175,
		OpULessThan = 176,
		OpSLessThan = 177,
		OpULessThanEqual = 178,
		OpSLessThanEqual = 179,
		OpFOrdEqual = 180,
		OpFUnordEqual = 181,
		OpFOrdNotEqual = 182,
		OpFUnordNotEqual = 183,
		OpFOrdLessThan = 184,
		OpFUnordLessThan = 185,
		OpFOrdGreaterThan = 186,
		OpFUnordGreaterThan = 187,
		OpFOrdLessThanEqual = 188,
		OpFUnordLessThanEqual = 189,
		OpFOrdGreaterThanEqual = 190,
		OpFUnordGreaterThanEqual = 191,
		OpShiftRightLogical = 194,
		OpShiftRightArithmetic = 195,
		OpShiftLeftLogical = 196,
		OpBitwiseOr = 197,
		OpBitwiseXor = 198,
		OpBitwiseAnd = 199,
		OpNot = 200,
		OpBitFieldInsert = 201,
		OpBitFieldSExtract = 202,
		OpBitFieldUExtract = 203,
		OpBitReverse = 204,
		OpBitCount = 205,
		OpDPdx = 207,
		OpDPdy = 208,
		OpFwidth = 209,
		OpDPdxFine = 210,
		OpDPdyFine = 211,
		OpFwidthFine = 212,
		OpDPdxCoarse = 213,
		OpDPdyCoarse = 214,
		OpFwidthCoarse = 215,
		OpEmitVertex = 218,
		OpEndPrimitive = 219,
		OpEmitStreamVertex = 220,
		OpEndStreamPrimitive = 221,
		OpControlBarrier = 224,
		OpMemoryBarrier = 225,
		OpAtomicLoad = 227,
		OpAtomicStore = 228,
		OpAtomicExchange = 229,
		OpAtomicCompareExchange = 230,
		OpAtomicCompareExchangeWeak = 231,
		OpAtomicIIncrement = 232,
		OpAtomicIDecrement = 233,
		OpAtomicIAdd = 234,
		OpAtomicISub = 235,
		OpAtomicSMin = 236,
		OpAtomicUMin = 237,
		OpAtomicSMax = 238,
		OpAtomicUMax = 239,
		OpAtomicAnd = 240,
		OpAtomicOr = 241,
		OpAtomicXor = 242,
		OpPhi = 245,
		OpLoopMerge = 246,
		OpSelectionMerge = 247,
		OpLabel = 248,
		OpBranch = 249,
		OpBranchConditional = 250,
		OpSwitch = 251,
		OpKill = 252,
		OpReturn = 253,
		OpReturnValue = 254,
		OpUnreachable = 255,
		OpLifetimeStart = 256,
		OpLifetimeStop = 257,
		OpGroupAsyncCopy = 259,
		OpGroupWaitEvents = 260,
		OpGroupAll = 261,
		OpGroupAny = 262,
		OpGroupBroadcast = 263,
		OpGroupIAdd = 264,
		OpGroupFAdd = 265,
		OpGroupFMin = 266,
		OpGroupUMin = 267,
		OpGroupSMin = 268,
		OpGroupFMax = 269,
		OpGroupUMax = 270,
		OpGroupSMax = 271,
		OpReadPipe = 274,
		OpWritePipe = 275,
		OpReservedReadPipe = 276,
		OpReservedWritePipe = 277,
		OpReserveReadPipePackets = 278,
		OpReserveWritePipePackets = 279,
		OpCommitReadPipe = 280,
		OpCommitWritePipe = 281,
		OpIsValidReserveId = 282,
		OpGetNumPipePackets = 283,
		OpGetMaxPipePackets = 284,
		OpGroupReserveReadPipePackets = 285,
		OpGroupReserveWritePipePackets = 286,
		OpGroupCommitReadPipe = 287,
		OpGroupCommitWritePipe = 288,
		OpEnqueueMarker = 291,
		OpEnqueueKernel = 292,
		OpGetKernelNDrangeSubGroupCount = 293,
		OpGetKernelNDrangeMaxSubGroupSize = 294,
		OpGetKernelWorkGroupSize = 295,
		OpGetKernelPreferredWorkGroupSizeMultiple = 296,
		OpRetainEvent = 297,
		OpReleaseEvent = 298,
		OpCreateUserEvent = 299,
		OpIsValidEvent = 300,
		OpSetUserEventStatus = 301,
		OpCaptureEventProfilingInfo = 302,
		OpGetDefaultQueue = 303,
		OpBuildNDRange = 304,
		OpImageSparseSampleImplicitLod = 305,
		OpImageSparseSampleExplicitLod = 306,
		OpImageSparseSampleDrefImplicitLod = 307,
		OpImageSparseSampleDrefExplicitLod = 308,
		OpImageSparseSampleProjImplicitLod = 309,
		OpImageSparseSampleProjExplicitLod = 310,
		OpImageSparseSampleProjDrefImplicitLod = 311,
		OpImageSparseSampleProjDrefExplicitLod = 312,
		OpImageSparseFetch = 313,
		OpImageSparseGather = 314,
		OpImageSparseDrefGather = 315,
		OpImageSparseTexelsResident = 316,
		OpNoLine = 317,
		OpAtomicFlagTestAndSet = 318,
		OpAtomicFlagClear = 319,
		OpImageSparseRead = 320,
		OpSizeOf = 321,
		OpTypePipeStorage = 322,
		OpConstantPipeStorage = 323,
		OpCreatePipeFromPipeStorage = 324,
		OpGetKernelLocalSizeForSubgroupCount = 325,
		OpGetKernelMaxNumSubgroups = 326,
		OpTypeNamedBarrier = 327,
		OpNamedBarrierInitialize = 328,
		OpMemoryNamedBarrier = 329,
		OpModuleProcessed = 330,
		OpExecutionModeId = 331,
		OpDecorateId = 332,
		OpGroupNonUniformElect = 333,
		OpGroupNonUniformAll = 334,
		OpGroupNonUniformAny = 335,
		OpGroupNonUniformAllEqual = 336,
		OpGroupNonUniformBroadcast = 337,
		OpGroupNonUniformBroadcastFirst = 338,
		OpGroupNonUniformBallot = 339,
		OpGroupNonUniformInverseBallot = 340,
		OpGroupNonUniformBallotBitExtract = 341,
		OpGroupNonUniformBallotBitCount = 342,
		OpGroupNonUniformBallotFindLSB = 343,
		OpGroupNonUniformBallotFindMSB = 344,
		OpGroupNonUniformShuffle = 345,
		OpGroupNonUniformShuffleXor = 346,
		OpGroupNonUniformShuffleUp = 347,
		OpGroupNonUniformShuffleDown = 348,
		OpGroupNonUniformIAdd = 349,
		OpGroupNonUniformFAdd = 350,
		OpGroupNonUniformIMul = 351,
		OpGroupNonUniformFMul = 352,
		OpGroupNonUniformSMin = 353,
		OpGroupNonUniformUMin = 354,
		OpGroupNonUniformFMin = 355,
		OpGroupNonUniformSMax = 356,
		OpGroupNonUniformUMax = 357,
		OpGroupNonUniformFMax = 358,
		OpGroupNonUniformBitwiseAnd = 359,
		OpGroupNonUniformBitwiseOr = 360,
		OpGroupNonUniformBitwiseXor = 361,
		OpGroupNonUniformLogicalAnd = 362,
		OpGroupNonUniformLogicalOr = 363,
		OpGroupNonUniformLogicalXor = 364,
		OpGroupNonUniformQuadBroadcast = 365,
		OpGroupNonUniformQuadSwap = 366,
		OpSubgroupBallotKHR = 4421,
		OpSubgroupFirstInvocationKHR = 4422,
		OpSubgroupAllKHR = 4428,
		OpSubgroupAnyKHR = 4429,
		OpSubgroupAllEqualKHR = 4430,
		OpSubgroupReadInvocationKHR = 4432,
		OpGroupIAddNonUniformAMD = 5000,
		OpGroupFAddNonUniformAMD = 5001,
		OpGroupFMinNonUniformAMD = 5002,
		OpGroupUMinNonUniformAMD = 5003,
		OpGroupSMinNonUniformAMD = 5004,
		OpGroupFMaxNonUniformAMD = 5005,
		OpGroupUMaxNonUniformAMD = 5006,
		OpGroupSMaxNonUniformAMD = 5007,
		OpFragmentMaskFetchAMD = 5011,
		OpFragmentFetchAMD = 5012,
		OpImageSampleFootprintNV = 5283,
		OpGroupNonUniformPartitionNV = 5296,
		OpWritePackedPrimitiveIndices4x8NV = 5299,
		OpReportIntersectionNV = 5334,
		OpIgnoreIntersectionNV = 5335,
		OpTerminateRayNV = 5336,
		OpTraceNV = 5337,
		OpTypeAccelerationStructureNV = 5341,
		OpExecuteCallableNV = 5344,
		OpSubgroupShuffleINTEL = 5571,
		OpSubgroupShuffleDownINTEL = 5572,
		OpSubgroupShuffleUpINTEL = 5573,
		OpSubgroupShuffleXorINTEL = 5574,
		OpSubgroupBlockReadINTEL = 5575,
		OpSubgroupBlockWriteINTEL = 5576,
		OpSubgroupImageBlockReadINTEL = 5577,
		OpSubgroupImageBlockWriteINTEL = 5578,
		OpDecorateStringGOOGLE = 5632,
		OpMemberDecorateStringGOOGLE = 5633,
		Max = 0x7fffffff,
	};

	_Check_return_ inline ImageOperandsMask operator |(_In_ ImageOperandsMask a, _In_ ImageOperandsMask b) 
	{
		return Pu::_CrtEnumBitOr(a, b);
	}

	_Check_return_ inline FPFastMathModeMask operator |(_In_ FPFastMathModeMask a, _In_ FPFastMathModeMask b)
	{
		return Pu::_CrtEnumBitOr(a, b);
	}

	_Check_return_ inline SelectionControlMask operator |(_In_ SelectionControlMask a, _In_ SelectionControlMask b)
	{ 
		return Pu::_CrtEnumBitOr(a, b);
	}

	_Check_return_ inline LoopControlMask operator |(_In_ LoopControlMask a, _In_ LoopControlMask b)
	{ 
		return Pu::_CrtEnumBitOr(a, b);
	}

	_Check_return_ inline FunctionControlMask operator |(_In_ FunctionControlMask a, _In_ FunctionControlMask b)
	{ 
		return Pu::_CrtEnumBitOr(a, b);
	}

	_Check_return_ inline MemorySemanticsMask operator |(_In_ MemorySemanticsMask a, _In_ MemorySemanticsMask b)
	{ 
		return Pu::_CrtEnumBitOr(a, b);
	}

	_Check_return_ inline MemoryAccessMask operator |(_In_ MemoryAccessMask a, _In_ MemoryAccessMask b)
	{ 
		return Pu::_CrtEnumBitOr(a, b);
	}

	_Check_return_ inline KernelProfilingInfoMask operator |(_In_ KernelProfilingInfoMask a, _In_ KernelProfilingInfoMask b)
	{ 
		return Pu::_CrtEnumBitOr(a, b);
	}
}

namespace Pu
{
	/* Gets a human readable version of the SPIR-V storage class enum. */
	_Check_return_ inline const char* to_string(_In_ spv::StorageClass storage)
	{
		switch (storage)
		{
		case spv::StorageClass::UniformConstant:
			return "Uniform constant";
		case spv::StorageClass::Input:
			return "Input";
		case spv::StorageClass::Uniform:
			return "Uniform";
		case spv::StorageClass::Output:
			return "Output";
		case spv::StorageClass::Workgroup:
			return "Workgroup";
		case spv::StorageClass::CrossWorkgroup:
			return "Cross workgroup";
		case spv::StorageClass::Private:
			return "Private";
		case spv::StorageClass::Function:
			return "Function";
		case spv::StorageClass::Generic:
			return "Generic";
		case spv::StorageClass::PushConstant:
			return "Push constant";
		case spv::StorageClass::AtomicCounter:
			return "Atomic counter";
		case spv::StorageClass::Image:
			return "Image";
		case spv::StorageClass::StorageBuffer:
			return "Storage buffer";
		default:
			return "Unknown";
		}
	}

	/* Gets a human readable version of the SPIR-V decoration enum. */
	_Check_return_ inline const char* to_string(_In_ spv::Decoration decoration)
	{
		switch (decoration)
		{
		case spv::Decoration::RelaxedPrecision:
			return "Relaxed precision";
		case spv::Decoration::SpecId:
			return "Specialization ID";
		case spv::Decoration::Block:
			return "Block";
		case spv::Decoration::BufferBlock:
			return "Buffer block";
		case spv::Decoration::RowMajor:
			return "Row major";
		case spv::Decoration::ColMajor:
			return "Column major";
		case spv::Decoration::ArrayStride:
			return "Array stride";
		case spv::Decoration::MatrixStride:
			return "Matrix stride";
		case spv::Decoration::GLSLShared:
			return "GLSL shared";
		case spv::Decoration::GLSLPacked:
			return "GLSL packed";
		case spv::Decoration::CPacked:
			return "C packed";
		case spv::Decoration::BuiltIn:
			return "Build in";
		case spv::Decoration::NoPerspective:
			return "No perspective";
		case spv::Decoration::Flat:
			return "Flat";
		case spv::Decoration::Patch:
			return "Patch";
		case spv::Decoration::Centroid:
			return "Centroid";
		case spv::Decoration::Sample:
			return "Sample";
		case spv::Decoration::Invariant:
			return "invariant";
		case spv::Decoration::Restrict:
			return "Restrict";
		case spv::Decoration::Aliased:
			return "Aliased";
		case spv::Decoration::Volatile:
			return "Volatile";
		case spv::Decoration::Constant:
			return "Constant";
		case spv::Decoration::Coherent:
			return "Cohert";
		case spv::Decoration::NonWritable:
			return "Non-writable";
		case spv::Decoration::NonReadable:
			return "Non-readable";
		case spv::Decoration::Uniform:
			return "Uniform";
		case spv::Decoration::SaturatedConversion:
			return "Saturated conversion";
		case spv::Decoration::Stream:
			return "Stream";
		case spv::Decoration::Location:
			return "Location";
		case spv::Decoration::Component:
			return "Component";
		case spv::Decoration::Index:
			return "Index";
		case spv::Decoration::Binding:
			return "Binding";
		case spv::Decoration::DescriptorSet:
			return "Descriptor set";
		case spv::Decoration::Offset:
			return "Offset";
		case spv::Decoration::XfbBuffer:
			return "Transform-feedback buffer";
		case spv::Decoration::XfbStride:
			return "Transform-feedback stride";
		case spv::Decoration::FuncParamAttr:
			return "Function parameter attribute";
		case spv::Decoration::FPRoundingMode:
			return "Floating point rounding mode";
		case spv::Decoration::FPFastMathMode:
			return "Floating point fast math mode";
		case spv::Decoration::LinkageAttributes:
			return "Linkage attributes";
		case spv::Decoration::NoContraction:
			return "No contraction";
		case spv::Decoration::InputAttachmentIndex:
			return "Input attachment index";
		case spv::Decoration::Alignment:
			return "Alignment";
		case spv::Decoration::MaxByteOffset:
			return "Max byte offset";
		case spv::Decoration::AlignmentId:
			return "Alignment ID";
		case spv::Decoration::MaxByteOffsetId:
			return "Max byte offset ID";
		default:
			return "Unknown";
		}
	}

	/* Gets the human readable version of the SPIR-V operation enum. */
	_Check_return_ inline const char* to_string(_In_ spv::Op code)
	{
		switch (code)
		{
		case spv::Op::OpNop:
			return "NOP";
		case spv::Op::OpUndef:
			return "Undef";
		case spv::Op::OpSourceContinued:
			return "Source Continued";
		case spv::Op::OpSource:
			return "Source";
		case spv::Op::OpSourceExtension:
			return "Source Extension";
		case spv::Op::OpName:
			return "Name";
		case spv::Op::OpMemberName:
			return "Member Name";
		case spv::Op::OpString:
			return "String";
		case spv::Op::OpLine:
			return "Line";
		case spv::Op::OpExtension:
			return "Extension";
		case spv::Op::OpExtInstImport:
			return "Extended Instance Import";
		case spv::Op::OpExtInst:
			return "Extended Instance";
		case spv::Op::OpMemoryModel:
			return "Memory Model";
		case spv::Op::OpEntryPoint:
			return "Entry Point";
		case spv::Op::OpExecutionMode:
			return "Execution Mode";
		case spv::Op::OpCapability:
			return "Capability";
		case spv::Op::OpTypeVoid:
			return "Type Void";
		case spv::Op::OpTypeBool:
			return "Type Bool";
		case spv::Op::OpTypeInt:
			return "Type Int";
		case spv::Op::OpTypeFloat:
			return "Type Float";
		case spv::Op::OpTypeVector:
			return "Type Vector";
		case spv::Op::OpTypeMatrix:
			return "Type Matrix";
		case spv::Op::OpTypeImage:
			return "Type Image";
		case spv::Op::OpTypeSampler:
			return "Type Sampler";
		case spv::Op::OpTypeSampledImage:
			return "Type Sampled Image";
		case spv::Op::OpTypeArray:
			return "Type Array";
		case spv::Op::OpTypeRuntimeArray:
			return "Type Runtime Array";
		case spv::Op::OpTypeStruct:
			return "Type Struct";
		case spv::Op::OpTypeOpaque:
			return "Type Opaque";
		case spv::Op::OpTypePointer:
			return "Type Pointer";
		case spv::Op::OpTypeFunction:
			return "Type Function";
		case spv::Op::OpTypeEvent:
			return "Type Event";
		case spv::Op::OpTypeDeviceEvent:
			return "Type Device Event";
		case spv::Op::OpTypeReserveId:
			return "Type Reserve ID";
		case spv::Op::OpTypeQueue:
			return "Type Queue";
		case spv::Op::OpTypePipe:
			return "Type Pipe";
		case spv::Op::OpTypeForwardPointer:
			return "Type Forward Pointer";
		case spv::Op::OpConstantTrue:
			return "Constant True";
		case spv::Op::OpConstantFalse:
			return "Constant False";
		case spv::Op::OpConstant:
			return "Constant";
		case spv::Op::OpConstantComposite:
			return "Constant Composite";
		case spv::Op::OpConstantSampler:
			return "Constant Sampler";
		case spv::Op::OpConstantNull:
			return "Constant Null";
		case spv::Op::OpSpecConstantTrue:
			return "Specialization Constant True";
		case spv::Op::OpSpecConstantFalse:
			return "Specialization Constant False";
		case spv::Op::OpSpecConstant:
			return "Specialization Constant";
		case spv::Op::OpSpecConstantComposite:
			return "Specialization Composite";
		case spv::Op::OpSpecConstantOp:
			return "Specialization Constant Op";
		case spv::Op::OpFunction:
			return "Function";
		case spv::Op::OpFunctionParameter:
			return "Function Parameter";
		case spv::Op::OpFunctionEnd:
			return "Function End";
		case spv::Op::OpFunctionCall:
			return "Function Call";
		case spv::Op::OpVariable:
			return "Variable";
		case spv::Op::OpImageTexelPointer:
			return "Image Texel Pointer";
		case spv::Op::OpLoad:
			return "Load";
		case spv::Op::OpStore:
			return "Store";
		case spv::Op::OpCopyMemory:
			return "Copy Memory";
		case spv::Op::OpCopyMemorySized:
			return "Copy Memory Sized";
		case spv::Op::OpAccessChain:
			return "Access Chain";
		case spv::Op::OpInBoundsAccessChain:
			return "In Bounds Access Chain";
		case spv::Op::OpPtrAccessChain:
			return "Pointer Access Chain";
		case spv::Op::OpArrayLength:
			return "Array Length";
		case spv::Op::OpGenericPtrMemSemantics:
			return "Generic pointer Memory Semantics";
		case spv::Op::OpInBoundsPtrAccessChain:
			return "In Bounds Pointer Access Chain";
		case spv::Op::OpDecorate:
			return "Decorate";
		case spv::Op::OpMemberDecorate:
			return "Member Decorate";
		case spv::Op::OpDecorationGroup:
			return "Decoration Groups";
		case spv::Op::OpGroupDecorate:
			return "Group Decorate";
		case spv::Op::OpGroupMemberDecorate:
			return "Group Member Decorate";
		case spv::Op::OpVectorExtractDynamic:
			return "Vector Extract Dynamic";
		case spv::Op::OpVectorInsertDynamic:
			return "Vector Insert Dynamic";
		case spv::Op::OpVectorShuffle:
			return "Vector Shuffle";
		case spv::Op::OpCompositeConstruct:
			return "Composite Construct";
		case spv::Op::OpCompositeExtract:
			return "Composite Extract";
		case spv::Op::OpCompositeInsert:
			return "Composite Insert";
		case spv::Op::OpCopyObject:
			return "Copy Object";
		case spv::Op::OpTranspose:
			return "Transpose";
		case spv::Op::OpSampledImage:
			return "Sampled Image";
		case spv::Op::OpImageSampleImplicitLod:
			return "Image Sample Implicit LoD";
		case spv::Op::OpImageSampleExplicitLod:
			return "Image Sample Explicit LoD";
		case spv::Op::OpImageSampleDrefImplicitLod:
			return "Image Sample Depth Reference Implicit LoD";
		case spv::Op::OpImageSampleDrefExplicitLod:
			return "Image Sample Depth Reference Explicit LoD";
		case spv::Op::OpImageSampleProjImplicitLod:
			return "Image Sample Projection Implicit LoD";
		case spv::Op::OpImageSampleProjExplicitLod:
			return "Image Sampler Projection Explicit LoD";
		case spv::Op::OpImageSampleProjDrefImplicitLod:
			return "Image Sample Projection Depth Reference Implicit LoD";
		case spv::Op::OpImageSampleProjDrefExplicitLod:
			return "Image Sample projection Depth Reference Explicit LoD";
		case spv::Op::OpImageFetch:
			return "Image Fetch";
		case spv::Op::OpImageGather:
			return "Image Gather";
		case spv::Op::OpImageDrefGather:
			return "Image Depth Reference Gather";
		case spv::Op::OpImageRead:
			return "Image Read";
		case spv::Op::OpImageWrite:
			return "Image Write";
		case spv::Op::OpImage:
			return "Image";
		case spv::Op::OpImageQueryFormat:
			return "Image Query Format";
		case spv::Op::OpImageQueryOrder:
			return "Image Query Order";
		case spv::Op::OpImageQuerySizeLod:
			return "Image Query Size LoD";
		case spv::Op::OpImageQuerySize:
			return "Image Query Size";
		case spv::Op::OpImageQueryLod:
			return "Image Query LoD";
		case spv::Op::OpImageQueryLevels:
			return "Image Query Levels";
		case spv::Op::OpImageQuerySamples:
			return "Image Query Samples";
		case spv::Op::OpConvertFToU:
			return "Floating-point to Unsigned-int Conversion";
		case spv::Op::OpConvertFToS:
			return "Floating-point to Signed-int Conversion";
		case spv::Op::OpConvertSToF:
			return "Signed-int to Floating-point Conversion";
		case spv::Op::OpConvertUToF:
			return "Unsigned-int to Floating-point Conversion";
		case spv::Op::OpUConvert:
			return "Unsigned-int Truncate or Zero Extent";
		case spv::Op::OpSConvert:
			return "Signed-int Truncate or Zero Extent";
		case spv::Op::OpFConvert:
			return "Floating-point Width Conversion";
		case spv::Op::OpQuantizeToF16:
			return "Floating-point quantize 16-bit";
		case spv::Op::OpConvertPtrToU:
			return "Pointer to Unsigned-int Conversion";
		case spv::Op::OpSatConvertSToU:
			return "Signed-int to Unsigned-int Conversion";
		case spv::Op::OpSatConvertUToS:
			return "Unsigned-int to Signed-int Conversion";
		case spv::Op::OpConvertUToPtr:
			return "Unsigned-int to Pointer Conversion";
		case spv::Op::OpPtrCastToGeneric:
			return "Pointer Storage to Generic Conversion";
		case spv::Op::OpGenericCastToPtr:
			return "Pointer Storage to Non-Generic Conversion";
		case spv::Op::OpGenericCastToPtrExplicit:
			return "Explicit Pointer Storage to Non-Generic Conversion";
		case spv::Op::OpBitcast:
			return "Bit Pattern-preserving Conversion";
		case spv::Op::OpSNegate:
			return "Signed-int Negate";
		case spv::Op::OpFNegate:
			return "Floating-point Negate";
		case spv::Op::OpIAdd:
			return "Integer Addition";
		case spv::Op::OpFAdd:
			return "Floating-point Addition";
		case spv::Op::OpISub:
			return "Integer Subtraction";
		case spv::Op::OpFSub:
			return "Floating-point Subtraction";
		case spv::Op::OpIMul:
			return "Integer Multiplication";
		case spv::Op::OpFMul:
			return "Floating-point Multiplication";
		case spv::Op::OpUDiv:
			return "Unsigned-int Division";
		case spv::Op::OpSDiv:
			return "Signed-int Division";
		case spv::Op::OpFDiv:
			return "Floating-point Division";
		case spv::Op::OpUMod:
			return "Unsigned-int Modulo";
		case spv::Op::OpSRem:
			return "Signed-int Remainder";
		case spv::Op::OpSMod:
			return "Signed-int Modulo";
		case spv::Op::OpFRem:
			return "Floating-point Remainder";
		case spv::Op::OpFMod:
			return "Floating-point Modulo";
		case spv::Op::OpVectorTimesScalar:
			return "Vector Times Scalar";
		case spv::Op::OpMatrixTimesScalar:
			return "Matrix Times Scalar";
		case spv::Op::OpVectorTimesMatrix:
			return "Vector Times Matrix";
		case spv::Op::OpMatrixTimesVector:
			return "Matrix Times Vector";
		case spv::Op::OpMatrixTimesMatrix:
			return "Matrix Times Matrix";
		case spv::Op::OpOuterProduct:
			return "Outer Product";
		case spv::Op::OpDot:
			return "Dot Product";
		case spv::Op::OpIAddCarry:
			return "Unsigned-int Add with Carry";
		case spv::Op::OpISubBorrow:
			return "Unsigned-int Subtraction with Borrow";
		case spv::Op::OpUMulExtended:
			return "Unsigned-int Full Multiplication";
		case spv::Op::OpSMulExtended:
			return "Signed-int Full Multiplication";
		case spv::Op::OpAny:
			return "Any Vector Component True";
		case spv::Op::OpAll:
			return "All Vector Components True";
		case spv::Op::OpIsNan:
			return "Floating-point Is NaN";
		case spv::Op::OpIsInf:
			return "Floating-point is Infinite";
		case spv::Op::OpIsFinite:
			return "Floating-point is Finite";
		case spv::Op::OpIsNormal:
			return "Floating-point is Normal";
		case spv::Op::OpSignBitSet:
			return "Is Sign Bit Set";
		case spv::Op::OpLessOrGreater:
			return "<Depricated>";
		case spv::Op::OpOrdered:
			return "Floating-point Vector is Numeric";
		case spv::Op::OpUnordered:
			return "Floating-point Vector is NaN";
		case spv::Op::OpLogicalEqual:
			return "Logical Equalily";
		case spv::Op::OpLogicalNotEqual:
			return "Logical Not Equal";
		case spv::Op::OpLogicalOr:
			return "Logical Or";
		case spv::Op::OpLogicalAnd:
			return "Logical And";
		case spv::Op::OpLogicalNot:
			return "Logical Not";
		case spv::Op::OpSelect:
			return "Select Between Two Objects";
		case spv::Op::OpIEqual:
			return "Integer Equalily";
		case spv::Op::OpINotEqual:
			return "Integer Not Equal";
		case spv::Op::OpUGreaterThan:
			return "Unsigned-int Greater Than";
		case spv::Op::OpSGreaterThan:
			return "Signed-int Greater Than";
		case spv::Op::OpUGreaterThanEqual:
			return "Unsigned-int Greater Or Equal Than";
		case spv::Op::OpSGreaterThanEqual:
			return "Signed-int Greater Or Equal Than";
		case spv::Op::OpULessThan:
			return "Unsigned-int Less Than";
		case spv::Op::OpSLessThan:
			return "Signed-int Less Than";
		case spv::Op::OpULessThanEqual:
			return "Unsigned-int Less Or Equal Than";
		case spv::Op::OpSLessThanEqual:
			return "Signed-int Less or Equal Than";
		case spv::Op::OpFOrdEqual:
			break;
		case spv::Op::OpFUnordEqual:
			break;
		case spv::Op::OpFOrdNotEqual:
			break;
		case spv::Op::OpFUnordNotEqual:
			break;
		case spv::Op::OpFOrdLessThan:
			return "Floating-point Less Than";
		case spv::Op::OpFUnordLessThan:
			break;
		case spv::Op::OpFOrdGreaterThan:
			break;
		case spv::Op::OpFUnordGreaterThan:
			break;
		case spv::Op::OpFOrdLessThanEqual:
			break;
		case spv::Op::OpFUnordLessThanEqual:
			break;
		case spv::Op::OpFOrdGreaterThanEqual:
			break;
		case spv::Op::OpFUnordGreaterThanEqual:
			break;
		case spv::Op::OpShiftRightLogical:
			break;
		case spv::Op::OpShiftRightArithmetic:
			break;
		case spv::Op::OpShiftLeftLogical:
			return "Logical Shift Left";
		case spv::Op::OpBitwiseOr:
			return "Bitwise Or";
		case spv::Op::OpBitwiseXor:
			return "Bitwise Xor";
		case spv::Op::OpBitwiseAnd:
			return "Bitwise And";
		case spv::Op::OpNot:
			return "Bitwise Not";
		case spv::Op::OpBitFieldInsert:
			break;
		case spv::Op::OpBitFieldSExtract:
			break;
		case spv::Op::OpBitFieldUExtract:
			break;
		case spv::Op::OpBitReverse:
			break;
		case spv::Op::OpBitCount:
			break;
		case spv::Op::OpDPdx:
			break;
		case spv::Op::OpDPdy:
			break;
		case spv::Op::OpFwidth:
			break;
		case spv::Op::OpDPdxFine:
			break;
		case spv::Op::OpDPdyFine:
			break;
		case spv::Op::OpFwidthFine:
			break;
		case spv::Op::OpDPdxCoarse:
			break;
		case spv::Op::OpDPdyCoarse:
			break;
		case spv::Op::OpFwidthCoarse:
			break;
		case spv::Op::OpEmitVertex:
			return "Emit Vertex";
		case spv::Op::OpEndPrimitive:
			break;
		case spv::Op::OpEmitStreamVertex:
			break;
		case spv::Op::OpEndStreamPrimitive:
			break;
		case spv::Op::OpControlBarrier:
			break;
		case spv::Op::OpMemoryBarrier:
			break;
		case spv::Op::OpAtomicLoad:
			break;
		case spv::Op::OpAtomicStore:
			break;
		case spv::Op::OpAtomicExchange:
			break;
		case spv::Op::OpAtomicCompareExchange:
			break;
		case spv::Op::OpAtomicCompareExchangeWeak:
			break;
		case spv::Op::OpAtomicIIncrement:
			break;
		case spv::Op::OpAtomicIDecrement:
			break;
		case spv::Op::OpAtomicIAdd:
			break;
		case spv::Op::OpAtomicISub:
			break;
		case spv::Op::OpAtomicSMin:
			break;
		case spv::Op::OpAtomicUMin:
			break;
		case spv::Op::OpAtomicSMax:
			break;
		case spv::Op::OpAtomicUMax:
			break;
		case spv::Op::OpAtomicAnd:
			break;
		case spv::Op::OpAtomicOr:
			break;
		case spv::Op::OpAtomicXor:
			break;
		case spv::Op::OpPhi:
			break;
		case spv::Op::OpLoopMerge:
			return "Loop Merge";
		case spv::Op::OpSelectionMerge:
			return "Selection Merge";
		case spv::Op::OpLabel:
			return "Label";
		case spv::Op::OpBranch:
			return "Branch";
		case spv::Op::OpBranchConditional:
			return "Branch Conditional";
		case spv::Op::OpSwitch:
			break;
		case spv::Op::OpKill:
			return "Kill";
		case spv::Op::OpReturn:
			return "Return";
		case spv::Op::OpReturnValue:
			return "Return Value";
		case spv::Op::OpUnreachable:
			break;
		case spv::Op::OpLifetimeStart:
			break;
		case spv::Op::OpLifetimeStop:
			break;
		case spv::Op::OpGroupAsyncCopy:
			break;
		case spv::Op::OpGroupWaitEvents:
			break;
		case spv::Op::OpGroupAll:
			break;
		case spv::Op::OpGroupAny:
			break;
		case spv::Op::OpGroupBroadcast:
			break;
		case spv::Op::OpGroupIAdd:
			break;
		case spv::Op::OpGroupFAdd:
			break;
		case spv::Op::OpGroupFMin:
			break;
		case spv::Op::OpGroupUMin:
			break;
		case spv::Op::OpGroupSMin:
			break;
		case spv::Op::OpGroupFMax:
			break;
		case spv::Op::OpGroupUMax:
			break;
		case spv::Op::OpGroupSMax:
			break;
		case spv::Op::OpReadPipe:
			break;
		case spv::Op::OpWritePipe:
			break;
		case spv::Op::OpReservedReadPipe:
			break;
		case spv::Op::OpReservedWritePipe:
			break;
		case spv::Op::OpReserveReadPipePackets:
			break;
		case spv::Op::OpReserveWritePipePackets:
			break;
		case spv::Op::OpCommitReadPipe:
			break;
		case spv::Op::OpCommitWritePipe:
			break;
		case spv::Op::OpIsValidReserveId:
			break;
		case spv::Op::OpGetNumPipePackets:
			break;
		case spv::Op::OpGetMaxPipePackets:
			break;
		case spv::Op::OpGroupReserveReadPipePackets:
			break;
		case spv::Op::OpGroupReserveWritePipePackets:
			break;
		case spv::Op::OpGroupCommitReadPipe:
			break;
		case spv::Op::OpGroupCommitWritePipe:
			break;
		case spv::Op::OpEnqueueMarker:
			break;
		case spv::Op::OpEnqueueKernel:
			break;
		case spv::Op::OpGetKernelNDrangeSubGroupCount:
			break;
		case spv::Op::OpGetKernelNDrangeMaxSubGroupSize:
			break;
		case spv::Op::OpGetKernelWorkGroupSize:
			break;
		case spv::Op::OpGetKernelPreferredWorkGroupSizeMultiple:
			break;
		case spv::Op::OpRetainEvent:
			break;
		case spv::Op::OpReleaseEvent:
			break;
		case spv::Op::OpCreateUserEvent:
			break;
		case spv::Op::OpIsValidEvent:
			break;
		case spv::Op::OpSetUserEventStatus:
			break;
		case spv::Op::OpCaptureEventProfilingInfo:
			break;
		case spv::Op::OpGetDefaultQueue:
			break;
		case spv::Op::OpBuildNDRange:
			break;
		case spv::Op::OpImageSparseSampleImplicitLod:
			break;
		case spv::Op::OpImageSparseSampleExplicitLod:
			break;
		case spv::Op::OpImageSparseSampleDrefImplicitLod:
			break;
		case spv::Op::OpImageSparseSampleDrefExplicitLod:
			break;
		case spv::Op::OpImageSparseSampleProjImplicitLod:
			break;
		case spv::Op::OpImageSparseSampleProjExplicitLod:
			break;
		case spv::Op::OpImageSparseSampleProjDrefImplicitLod:
			break;
		case spv::Op::OpImageSparseSampleProjDrefExplicitLod:
			break;
		case spv::Op::OpImageSparseFetch:
			break;
		case spv::Op::OpImageSparseGather:
			break;
		case spv::Op::OpImageSparseDrefGather:
			break;
		case spv::Op::OpImageSparseTexelsResident:
			break;
		case spv::Op::OpNoLine:
			break;
		case spv::Op::OpAtomicFlagTestAndSet:
			break;
		case spv::Op::OpAtomicFlagClear:
			break;
		case spv::Op::OpImageSparseRead:
			break;
		case spv::Op::OpSizeOf:
			break;
		case spv::Op::OpTypePipeStorage:
			break;
		case spv::Op::OpConstantPipeStorage:
			break;
		case spv::Op::OpCreatePipeFromPipeStorage:
			break;
		case spv::Op::OpGetKernelLocalSizeForSubgroupCount:
			break;
		case spv::Op::OpGetKernelMaxNumSubgroups:
			break;
		case spv::Op::OpTypeNamedBarrier:
			break;
		case spv::Op::OpNamedBarrierInitialize:
			break;
		case spv::Op::OpMemoryNamedBarrier:
			break;
		case spv::Op::OpModuleProcessed:
			break;
		case spv::Op::OpExecutionModeId:
			break;
		case spv::Op::OpDecorateId:
			break;
		case spv::Op::OpGroupNonUniformElect:
			break;
		case spv::Op::OpGroupNonUniformAll:
			break;
		case spv::Op::OpGroupNonUniformAny:
			break;
		case spv::Op::OpGroupNonUniformAllEqual:
			break;
		case spv::Op::OpGroupNonUniformBroadcast:
			break;
		case spv::Op::OpGroupNonUniformBroadcastFirst:
			break;
		case spv::Op::OpGroupNonUniformBallot:
			break;
		case spv::Op::OpGroupNonUniformInverseBallot:
			break;
		case spv::Op::OpGroupNonUniformBallotBitExtract:
			break;
		case spv::Op::OpGroupNonUniformBallotBitCount:
			break;
		case spv::Op::OpGroupNonUniformBallotFindLSB:
			break;
		case spv::Op::OpGroupNonUniformBallotFindMSB:
			break;
		case spv::Op::OpGroupNonUniformShuffle:
			break;
		case spv::Op::OpGroupNonUniformShuffleXor:
			break;
		case spv::Op::OpGroupNonUniformShuffleUp:
			break;
		case spv::Op::OpGroupNonUniformShuffleDown:
			break;
		case spv::Op::OpGroupNonUniformIAdd:
			break;
		case spv::Op::OpGroupNonUniformFAdd:
			break;
		case spv::Op::OpGroupNonUniformIMul:
			break;
		case spv::Op::OpGroupNonUniformFMul:
			break;
		case spv::Op::OpGroupNonUniformSMin:
			break;
		case spv::Op::OpGroupNonUniformUMin:
			break;
		case spv::Op::OpGroupNonUniformFMin:
			break;
		case spv::Op::OpGroupNonUniformSMax:
			break;
		case spv::Op::OpGroupNonUniformUMax:
			break;
		case spv::Op::OpGroupNonUniformFMax:
			break;
		case spv::Op::OpGroupNonUniformBitwiseAnd:
			break;
		case spv::Op::OpGroupNonUniformBitwiseOr:
			break;
		case spv::Op::OpGroupNonUniformBitwiseXor:
			break;
		case spv::Op::OpGroupNonUniformLogicalAnd:
			break;
		case spv::Op::OpGroupNonUniformLogicalOr:
			break;
		case spv::Op::OpGroupNonUniformLogicalXor:
			break;
		case spv::Op::OpGroupNonUniformQuadBroadcast:
			break;
		case spv::Op::OpGroupNonUniformQuadSwap:
			break;
		case spv::Op::OpSubgroupBallotKHR:
			break;
		case spv::Op::OpSubgroupFirstInvocationKHR:
			break;
		case spv::Op::OpSubgroupAllKHR:
			break;
		case spv::Op::OpSubgroupAnyKHR:
			break;
		case spv::Op::OpSubgroupAllEqualKHR:
			break;
		case spv::Op::OpSubgroupReadInvocationKHR:
			break;
		case spv::Op::Max:
			break;
		}
		
		return "Unknown";
	}
}